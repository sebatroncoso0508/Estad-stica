---
title: "Ayudantía 1"
author: "Equipo Estadística 2"
format: 
  revealjs:
    theme: "serif"
    slideNumber: true
    center: true
    fontsize: 20pt
---

```{r setup, include=FALSE}
# Establecer el espejo de CRAN
options(repos = c(CRAN = "https://cran.rstudio.com/"))

```

## Ayudantías

-Las ayudantías serán semanales y con asistencia obligatora.

-Tendrán un enfoque en el refuerzo práctico de los contenidos de clase.

-Habrá controles en las ayudantías; estos no serán complejos y la idea es que puedan reforzar lo visto en clase.

## Fechas Controles (15% Nota Presentación)

-Control AyudaLab 1: 27/03/2025

-Control AyudaLab 2: 17/04/2025

-Control AyudaLab 3: 22/05/2025

-Control AyudaLab 4: 05/06/2025

-Control AyudaLab 5: 03/07/2025

## Libro R

En la práctica como sociólogxs, pocas personas se aprenden los códigos de R de memoria, por lo mismo, desarrollaremos un Libro R.

Este material servirá de repositorio para los principales códigos que utilicemos en el curso, con el fin de que les sirva de apoyo para evaluaciones y sus futuros proyectos estadísticos.

Este va a ser publicado por nosotrxs como equipo, pero será completado con la colaboración de ustedes.

## Contenidos Ayudantía 1

Esta primera ayudantía tiene la finalidad de repasar los elementos básicos de R, con tal de estar listxs para empezar a analizar datos la próxima semana. Los contenidos de este material serán:

1.  Qué es R y RStudio
2.  Interfaz RStudio
3.  Funciones básicas
4.  Vectores y creación de bases de datos
5.  Rproject
6.  Paquetes
7.  Apertura de bases de datos

## R y RStudio

Existen múltiples programas para el análisis estadístico, siendo los más populares STATA, SPSS y R. R se ha vuelto el software más utilizado en los últimos años, debido a su accesibilidad gratuita, su potencia en análisis/presentación de información y su versatilidad por ser de código abierto. (Eso y muchas otras razones)

R es el programa/lenguaje de programación y Rstudio es un entorno que actúa como interfaz para hacer más amigable la utilización y navegación por R.

Si bien el programa se utiliza en mayor medida para análisis estadístico, también tiene gran potencialidad en análisis cualitativos de textos, presentación de información (como esta misma presentación), entre muchas otras funciones.

## R y RStudio

Todos estos gráficos fueron generados con R. La librería más popular para estas tareas es ggplot y la utilizaremos más adelante en el curso. ![](GrafR.png){fig-align="center" width="587"}

## R y RStudio

Esto es arte generativo hecho con R. No tiene nada que ver con el curso y nada más fue puesto aquí para mostrarles la versatilidad del programa.

![](ArteR.png){fig-align="center" width="249"}

## RStudio

Estos son los cuatro elementos principales en la interfaz de Rstudio. Conocerlos es crucial, ya que, interactuaremos con ellos constantemente.

![](Presentación%20Proyecto%20libreta%20Creativo%20Doodle%20Rosa.jpg){fig-align="center" width="617"}

## Funciones básicas en R

Como bien recordarán, podemos utilizar R para realizar operaciones básicas como si fuera una calculadora:

```{r echo= T, results="markup"}

300+200
100-42
4*7
25/5

```

También nos permite establecer comparaciones lógicas entre valores, indicando TRUE (verdadero) o FALSE (falso) según lo que estemos comparando:

```{r echo= T, results="markup"}

100 == 200 # "==" Esto significa igual a
400 > 399 # Mayor a

```

## Funciones básicas en R

Además de la adición, sustracción, multiplicación y división, estas son otras funciones básicas en R

| Operación | Significado       |
|-----------|-------------------|
| ==        | Igual a           |
| !=        | Distinto a        |
| \>        | Mayor que         |
| \>=       | Mayor o igual que |
| \<        | Menor que         |
| \<=       | Menor o igual que |

**Estas se vuelven importantes cuando queramos recodificar y filtrar variables.**

## Vectores

Los vectores son conjuntos de datos del mismo tipo, aplicado a las ciencias sociales estos serían variables. Podemos destacar 3 tipos de vectores más relevantes:

1.  Numéricos: valores numéricos, incluye decimales.

2.  Carácter: valores alfanuméricos, es decir, letras, números y signos mezclados.

3.  Lógicos: valores lógicos. (TRUE o FALSE)

## Vectores

Para la creación de vectores en R, se utiliza la función **c()** que significa concatenar o combinar. Esta función permite unir una serie de elementos de un mismo tipo.

En el caso de vectores numéricos, los números decimales se deben escribir con un punto ("."), ya que, la coma (",") es la que indica separación de valores dentro de una lista. Utilizar errónamente estos signos es un problema muy común en la ejecución de códigos, así que harto cuidado al utilizar estas puntuaciones.

```{r echo= T, results="markup"}
estaturas <- c(1.85, 1.63, 1.75, 1.57)


```

En los vectores de carácter, las palabras deben ir entre comillas ("")

```{r echo= T, results="markup"}
nombres <- c("Ana", "Alejandro", "Andrés", "María")


```

En los vectores lógicos se utiliza TRUE (T) y FALSE (F). Tanto las palabras, como la letra funcionan, en cualquier caso, deben ir en mayúscula.

```{r echo= T, results="markup"}
mayorde18 <- c(T, F, T, T)


```

## Base de datos

Ya habiendo creado vectores, los podemos combinar para crear una base de datos.

En la combinación de estos, es muy importante que todos los vectores tengan la misma cantidad valores, en el caso de que no se cumpla esa condición, aparecerá un error en la consola.

```{r echo= T, results="markup"}
bbdd <- data.frame (nombres, estaturas, mayorde18)

print(bbdd) #Este comando sirve para imprimir y visualizar elementos cargados en nuestro entorno.


```

## Ejercicio 1

Hacer una base de datos que contenga los siguientes vectores:

-Casas: casa1, casa2, casa3, casa4

-Ingreso Promedio del hogar: 30.5, 70, 54.4, 300

-Número de personas en el hogar: 3, 4, 2, 3

Finalmente imprima y observe la base de datos

**Recordar revisar puntuación y que la cantidad de valores entre vectores coincida.**

## Ejercicio 1 Resuelto

```{r echo= T, results="markup"}
casas <- c("casa1","casa2","casa3","casa4")

iph <- c(30.5, 70, 54.4, 300)

nperh <- c(3, 4, 2, 3)

basecasas <- data.frame(casas, iph, nperh)

print(basecasas)
```

## R project

En nuestro quehacer de sociólogxs es crucial mantener el orden, claridad, transparencia y replicabilidad de nuestros análisis. Esto es fundamental para que otras personas puedan comprender y reproducir nuestros resultados.

Una de las mejores formas de garantizar el orden y transparencia del trabajo en R es utilizando "R project". Estos son entornos en que se almacenan datos, códigos y procesos del trabajo realizado.

Para crear uno apretaremos File -\> New Project o clickeando el cubo con la R que dice Create a Project en la parte superior izquierda. Esto creará una carpeta que contenga todo el trabajo que vayamos haciendo. También funcionará como directorio, permitiéndonos cargar bases de datos externas desde esa carpeta.

## Paquetes y bases de datos

Los paquetes (Packages) son funciones descargables que permiten realizar una diversidad de tareas en R, como, por ejemplo, análisis estadísticos complejos, creación de gráficos, manipulación de bases de datos y muchas otras funcionalidades.

Las bases de datos normalmente vienen en formato sav (SPSS), dta (STATA), xlsx (Excel) y csv (Excel con valores separados por coma). Para cada una utilizaremos los siguientes paquetes:

| Formato | Programa | Paquete | Función |
|------------------|-------------------|------------------|------------------|
| .sav | SPSS | haven | read_sav("base.sav") |
| .dta | STATA | haven | read_dta("base.dta") |
| .xlsx | Excel | readxl | read_xlsx("base.xlsx") |
| .csv | Excel con valores separados por comas | readr | read_csv("base.csv") |

## Cargar paquetes y BBDD

La mayoría de los paquetes no vienen por defecto en R, entonces, debemos instalarlos. Para esto seguiremos el siguiente procedimiento:

**1. Instalar la librería deseada**

```{r echo= T, results="markup", results="hide", warning=FALSE}
install.packages("haven")

#Aquí siempre debe ir el paquete entre comillas.
```

**2. Llamar a la librería instalada**

```{r echo= T, results="markup", warning=FALSE}
library(haven)

#Aquí sin comillas
```

**3. Utilizar las funciones de la librería**

```{r echo= T, results="markup"}
lapop <- read_sav("LAPOP 2023.sav")

#Se asigna un nombre a la base de datos
```

**Al cargar una base de datos, es crucial que esta se encuentre en el directorio en que estamos trabajando. En este caso utilizamos un Rproject, entonces, la base debe estar dentro de esa carpeta.**

## Cargar paquetes y BBDD

Nota: Los paquetes/librerías solo se instalan **install.packages()** una vez por computador. Lo que se debe realizar en cada nueva sesión es llamar a la librería **library()**

## Manipulación y observación de bases de datos

Antes de hacer cualquier análisis, es muy importante observar la base de datos y las variables que nos interesan. En este ejemplo quiero analizar las variables edad (q2) y escala política izquierda-derecha del 1 al 10 (l1), ambas de la base de datos Lapop, que es una encuesta de opinión pública con preguntas sobre política.

Una buena práctica es separar en una nueva base las variables que queremos utilizar y eso haremos a continuación.

## Manipulación y observación de bases de datos

Existen varias formas de seleccionar y separar variables de una base de datos, la más básica es la función que viene en R base.

```{r echo= T, results="markup", message=FALSE}

seleccionlapop <- lapop[,c("q2","l1")]

head(seleccionlapop)
```

En este código estamos indicando que se le asigne a una base de datos nueva las columnas (variables) q2 (edad) y l1 (posición política), de nuestra base de datos inicial llamada Lapop.

## Manipulación y observación de bases de datos

**Esta es una forma alternativa, algo más compleja, pero es importante conocerla.**

Como vieron en Estadística 1, también existe una librería que facilita la manipulación de datos, esta es tidyverse. Este paquete contiene muchas otras liberarías y nos permite filtrar, seleccionar, graficar, etc. En este caso podemos hacer la selección de variables de interés q2 y l1 con el comando select().

```{r echo= T, results="markup", message=FALSE, results="hide"}

install.packages("tidyverse") #Instalamos la libreria

library(tidyverse) #Llamamos a la libreria

lapopselect<-lapop %>% select(q2, l1) #El %>% es un pipeline, es decir, una tubería que une en orden distintas acciones dentro del código.

```

Ahora exploraré la nueva base con el comando head()

```{r echo= T, results="markup", message=FALSE}
head(lapopselect)
```

## Ejercicio 2

-Crear un proyecto de R nuevo.

-Abrir un script nuevo.

-Descargar y abrir la base de datos del índice de Desarrollo Humano 2021 de Latinoamérica desde Canvas, llamada: IDH_2021_AL.

-Seleccionar y separar en una nueva base las variables "país" (PAIS), "índice de desarrollo humano" (IDH) y "esperanza de vida" (EVIDA).

-Luego observar la nueva base de datos.

**Al descargar la base, es importante siempre verificar el formato en el que viene, esto para saber qué paquete es necesario utilizar.**

## Ejercicio 2 Resuelto

**Solo se presentará el resultado del código y no el proceso de creación de Rproject**

```{r echo= T, results="markup", message=FALSE}
rm(list = ls()) #Este código limpia los elementos del ambiente. No es obligación utilizarlo, pero, es una buena práctica para mantener el orden.

install.packages("haven") #La base de datos es .sav, entonces, si es necesario instalamos haven.

library(haven)  #Llamamos a la librería para utilizarla.

idh <- read_sav ("IDH_2021_AL.sav") #Abrimos la base de datos

idhselec <- idh[,c("PAIS","IDH","EVIDA")] #Seleccionamos las tres variables

head(idhselec) #Observamos la parte superior de los datos

```

## FIN

**Cualquier cosa no duden en hablarnos**

**Les deseo un increíble inicio del año académico :)**
